// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    /*
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };
*/

    combos {
        compatible = "zmk,combos";

        leftBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 17>;
            layers = <1>;
        };

        rightBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <26 17 18>;
            layers = <1>;
        };

        RU-EN {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <26 27>;
            layers = <0>;
        };

        ctrl-backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <13 12>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T    &kp Y      &kp U      &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G    &kp H      &kp J      &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B    &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH
                     &mo 1  &mo 2    &kp LSHFT  &kp SPACE
            >;
        };

        lower_layer {
            bindings = <
&kp N1                &kp N2            &kp N3     &kp N4     &kp N5     &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
&kp BACKSLASH         &kp EQUAL         &kp MINUS  &kp BSPC   &trans     &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp SQT
&mt LEFT_SHIFT GRAVE  &mt LCTRL ESCAPE  &kp DEL    &kp ENTER  &kp N0     &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp CAPS
                                                   &trans     &kp ESC    &kp LSHFT  &mo 3
            >;
        };

        raise_layer {
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4         &kp F5     &kp F6  &kp F7  &kp F8  &kp F9   &kp F10
&kp LWIN   &kp LALT   &kp LCTRL  &kp LSHFT      &kp TAB    &trans  &trans  &trans  &kp F11  &kp F12
&kp RSHFT  &kp RCTRL  &kp RALT   &kp RIGHT_GUI  &trans     &trans  &trans  &trans  &trans   &trans
                                 &trans         &trans     &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&sys_reset      &trans  &studio_unlock  &out OUT_TOG  &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader     &trans  &trans          &kp J         &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&studio_unlock  &trans  &trans          &bt BT_CLR    &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans          &trans  &trans
            >;
        };
    };
};
